import emailjs from"@emailjs/nodejs";import{randomBytes}from"crypto";function generateCSRFToken(){return`${randomBytes(32).toString("hex")}-${Date.now().toString(36)}-${randomBytes(16).toString("hex")}`}const csrfTokens=new Map;export default async function handler(e,s){if(s.setHeader("Access-Control-Allow-Origin","https://ammopy.github.io"),s.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS"),s.setHeader("Access-Control-Allow-Headers","Content-Type"),s.setHeader("Access-Control-Allow-Credentials","true"),s.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate"),s.setHeader("Pragma","no-cache"),s.setHeader("Expires","0"),"OPTIONS"===e.method)return s.status(200).end();if("GET"===e.method){const e=generateCSRFToken();return csrfTokens.set(e,!0),s.setHeader("Set-Cookie",`csrfToken=${e}; HttpOnly; Secure; SameSite=None; Path=/; Partitioned`),s.status(200).json({success:!0})}if("POST"===e.method){if("application/json"!==e.headers["content-type"])return s.status(400).json({success:!1,error:"Invalid content type"});const t=e.cookies.csrfToken;if(!t||!csrfTokens.has(t))return s.status(403).json({success:!1,error:"Invalid CSRF token"});csrfTokens.delete(t);const{email:r,subject:o,message:n}=e.body;if(!r||!o||!n)return s.status(400).json({success:!1,error:"Invalid input data"});if(!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(r)||o.length>100||n.length>1e3)return s.status(400).json({success:!1,error:"Invalid input data"});try{return await emailjs.send(process.env.SERVICE_ID,process.env.TEMPLATE_ID,{email:r,subject:o,message:n},{publicKey:process.env.API_KEY}),s.status(200).json({success:!0})}catch(e){return console.error("EmailJS Error:",e.message||e),s.status(500).json({success:!1,error:"Failed to send email"})}}return s.status(405).json({success:!1,error:"Method not allowed"})}