import e from"@emailjs/nodejs";import{randomBytes as t}from"crypto";function generateCSRFToken(){let e=e(32).toString("hex"),t=Date.now().toString(36),s=e(16).toString("hex"),r=`${e}-${t}-${s}`;return r}let csrfTokens=new Map;export default async function s(t,s){if(s.setHeader("Access-Control-Allow-Origin","*"),s.setHeader("Access-Control-Allow-Methods","POST, OPTIONS"),s.setHeader("Access-Control-Allow-Headers","Content-Type, X-CSRF-Token"),"OPTIONS"===t.method)return s.status(200).end();if("GET"===t.method){let r=generateCSRFToken();return csrfTokens.set(r,!0),s.status(200).json({csrfToken:r})}if("GET"===t.method){let n=generateCSRFToken();return csrfTokens.set(n,!0),s.status(200).json({csrfToken:n})}if("POST"===t.method){if("application/json"!==t.headers["content-type"])return s.status(400).json({success:!1,error:"Invalid content type"});let o=t.headers["x-csrf-token"];if(!o||!csrfTokens.has(o))return s.status(403).json({success:!1,error:"Invalid CSRF token"});csrfTokens.delete(o);let{email:a,subject:c,message:l}=t.body;if(!a||!c||!l||!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(a)||c.length>100||l.length>1e3)return s.status(400).json({success:!1,error:"Invalid input data"});try{return await e.send(process.env.SERVICE_ID,process.env.TEMPLATE_ID,{email:a,subject:c,message:l},{publicKey:process.env.API_KEY}),s.status(200).json({success:!0})}catch(u){return console.error("EmailJS Error:",u.message||u),s.status(500).json({success:!1,error:"Failed to send email"})}}return s.status(405).json({success:!1,error:"Method not allowed"})};