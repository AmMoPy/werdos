import emailjs from"@emailjs/nodejs";import{randomBytes,createHmac}from"crypto";const SECRET_KEY=process.env.CSRF_SECRET;function generateCSRFToken(){const randomBytesValue=randomBytes(32).toString("hex");const timestamp=Date.now();const payload=`${randomBytesValue}:${timestamp}`;const signature=createHmac("sha256",SECRET_KEY).update(payload).digest("hex");return{token:`${payload}:${signature}`,timestamp:timestamp}}function validateCSRFToken(token){if(!token)return false;const parts=token.split(":");if(parts.length<3)return false;const randomValue=parts[0];const timestamp=parseInt(parts[1],10);const providedSignature=parts[2];const now=Date.now();if(now-timestamp>30*60*1e3)return false;const payload=`${randomValue}:${timestamp}`;const expectedSignature=createHmac("sha256",SECRET_KEY).update(payload).digest("hex");return expectedSignature===providedSignature}export default async function handler(req,res){res.setHeader("Access-Control-Allow-Origin","https://ammopy.github.io");res.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS");res.setHeader("Access-Control-Allow-Headers","Content-Type");res.setHeader("Access-Control-Allow-Credentials","true");res.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate");res.setHeader("Pragma","no-cache");res.setHeader("Expires","0");if(req.method==="OPTIONS"){return res.status(200).end()}if(req.method==="GET"){const{token:token,timestamp:timestamp}=generateCSRFToken();res.setHeader("Set-Cookie",`csrfToken=${token}; Domain=werdos.vercel.app; HttpOnly; Secure; SameSite=None; Path=/; Partitioned; Max-Age=1800`);return res.status(200).json({success:true})}if(req.method==="POST"){if(req.headers["content-type"]!=="application/json"){return res.status(400).json({success:false,error:"Invalid Request_"})}const csrfToken=req.cookies.csrfToken;if(!csrfToken||!validateCSRFToken(csrfToken)){return res.status(403).json({success:false,error:"Invalid Request"})}const{email:email,subject:subject,message:message}=req.body;if(!email||!subject||!message){return res.status(400).json({success:false,error:"_Invalid Request"})}const emailRegex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;if(!emailRegex.test(email)||subject.length>100||message.length>1e3){return res.status(400).json({success:false,error:"_Invalid Request"})}try{await emailjs.send(process.env.SERVICE_ID,process.env.TEMPLATE_ID,{email:email,subject:subject,message:message},{publicKey:process.env.API_KEY});return res.status(200).json({success:true})}catch(error){console.error("EmailJS Error:",error.message||error);return res.status(500).json({success:false,error:"Failed to send email"})}}return res.status(405).json({success:false,error:"Method not allowed"})}