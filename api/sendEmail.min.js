import emailjs from"@emailjs/nodejs";import{randomBytes,createHmac}from"crypto";const SECRET_KEY=process.env.CSRF_SECRET;function debugLog(req,message,data={}){console.log(`[DEBUG] ${message}`,{timestamp:(new Date).toISOString(),origin:req.headers.origin,referer:req.headers.referer,path:req.url,method:req.method,...data})}function generateCSRFToken(){const randomBytesValue=randomBytes(32).toString("hex");const timestamp=Date.now();const payload=`${randomBytesValue}:${timestamp}`;const signature=createHmac("sha256",SECRET_KEY).update(payload).digest("hex");return{token:`${payload}:${signature}`,timestamp:timestamp}}function validateCSRFToken(token){if(!token)return{valid:false,reason:"No token provided"};const parts=token.split(":");if(parts.length<3)return{valid:false,reason:"Invalid token format"};const randomValue=parts[0];const timestamp=parseInt(parts[1],10);const providedSignature=parts[2];if(isNaN(timestamp))return{valid:false,reason:"Invalid timestamp"};const now=Date.now();if(now-timestamp>30*60*1e3)return{valid:false,reason:"Token expired",tokenAge:Math.floor((now-timestamp)/1e3)+" seconds"};const payload=`${randomValue}:${timestamp}`;const expectedSignature=createHmac("sha256",SECRET_KEY).update(payload).digest("hex");return{valid:expectedSignature===providedSignature,reason:expectedSignature===providedSignature?"Valid":"Invalid signature"}}export default async function handler(req,res){const allowedOrigins=["https://ammopy.github.io","https://ammopy.github.io/AmMoPy","https://ammopy.github.io/werdos","https://ammopy.github.io/AmMoPy/","https://ammopy.github.io/werdos/"];debugLog(req,"Request received",{cookies:req.cookies,contentType:req.headers["content-type"]});const origin=req.headers.origin;let isAllowedOrigin=false;if(origin){isAllowedOrigin=allowedOrigins.some((allowed=>origin===allowed||origin.startsWith(allowed+"/")))}if(isAllowedOrigin){res.setHeader("Access-Control-Allow-Origin",origin);debugLog(req,"CORS allowed for origin",{origin:origin})}else{debugLog(req,"CORS denied for origin",{origin:origin,allowedOrigins:allowedOrigins})}res.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS");res.setHeader("Access-Control-Allow-Headers","Content-Type");res.setHeader("Access-Control-Allow-Credentials","true");res.setHeader("Cache-Control","no-store, no-cache, must-revalidate, proxy-revalidate");res.setHeader("Pragma","no-cache");res.setHeader("Expires","0");if(req.method==="OPTIONS"){debugLog(req,"Handling OPTIONS request");return res.status(200).end()}if(req.method==="GET"){debugLog(req,"Handling GET request to generate CSRF token");const{token:token,timestamp:timestamp}=generateCSRFToken();const cookieString=`csrfToken=${token}; HttpOnly; Secure; SameSite=None; Path=/; Max-Age=1800`;res.setHeader("Set-Cookie",cookieString);debugLog(req,"CSRF token generated",{tokenTimestamp:timestamp,cookieSet:cookieString});return res.status(200).json({success:true,message:"CSRF token set",debug:{tokenGenerated:true,origin:origin}})}if(req.method==="POST"){debugLog(req,"Handling POST request");if(req.headers["content-type"]!=="application/json"){debugLog(req,"Invalid content type",{contentType:req.headers["content-type"]});return res.status(400).json({success:false,error:"Invalid Request: Wrong content type",debug:{contentType:req.headers["content-type"]}})}const csrfToken=req.cookies.csrfToken;const tokenValidation=validateCSRFToken(csrfToken);debugLog(req,"CSRF token validation result",{tokenPresent:!!csrfToken,validation:tokenValidation});if(!csrfToken||!tokenValidation.valid){return res.status(403).json({success:false,error:"Invalid Request: CSRF validation failed",debug:{tokenPresent:!!csrfToken,validation:tokenValidation}})}const{email:email,subject:subject,message:message}=req.body;debugLog(req,"Form data received",{emailProvided:!!email,subjectLength:subject?subject.length:0,messageLength:message?message.length:0});if(!email||!subject||!message){debugLog(req,"Missing required form fields");return res.status(400).json({success:false,error:"Invalid Request: Missing required fields",debug:{emailProvided:!!email,subjectProvided:!!subject,messageProvided:!!message}})}const emailRegex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;if(!emailRegex.test(email)||subject.length>100||message.length>1e3){debugLog(req,"Input validation failed",{emailValid:emailRegex.test(email),subjectTooLong:subject.length>100,messageTooLong:message.length>1e3});return res.status(400).json({success:false,error:"Invalid Request: Validation failed",debug:{emailValid:emailRegex.test(email),subjectTooLong:subject.length>100,messageTooLong:message.length>1e3}})}try{debugLog(req,"Attempting to send email");await emailjs.send(process.env.SERVICE_ID,process.env.TEMPLATE_ID,{email:email,subject:subject,message:message},{publicKey:process.env.API_KEY});debugLog(req,"Email sent successfully");return res.status(200).json({success:true,message:"Email sent successfully"})}catch(error){debugLog(req,"EmailJS Error",{errorMessage:error.message||String(error),errorStack:error.stack});return res.status(500).json({success:false,error:"Failed to send email",debug:{errorMessage:error.message||String(error)}})}}debugLog(req,"Unsupported method");return res.status(405).json({success:false,error:"Method not allowed",debug:{method:req.method}})}