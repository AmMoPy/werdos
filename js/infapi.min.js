import{Client}from"https://cdn.jsdelivr.net/npm/@gradio/client@1.11.0/dist/index.min.js";import{CONFIG}from"./config.min.js";import{LimitedCache,getFileHash,compressImage}from"./utils.min.js";let client=null;const cache=new LimitedCache(CONFIG.CACHE_MAX_SIZE);const pendingRequests=new Map;async function initializeClient(){try{client=await Client.connect(CONFIG.GRADIO_APP);console.log("Inference API client connected successfully")}catch(error){console.error("Failed to connect to API:",error);throw error}}async function classifyImage(file){if(!client){throw new Error("API client not initialized")}const cacheKey=await getFileHash(file);if(cache.has(cacheKey)){return cache.get(cacheKey)}if(pendingRequests.has(cacheKey)){console.log("Deduplicating request for:",file.name);return await pendingRequests.get(cacheKey)}const requestPromise=(async()=>{const header=document.querySelector("header");header?.classList.add("siren-effect");try{const compressedFile=await compressImage(file);const result=await client.predict("/predict",{img:compressedFile});cache.set(cacheKey,result.data);return result.data}catch(error){console.error("Error classifying image:",error);throw new Error("Failed to classify image. Please try again.")}finally{header?.classList.remove("siren-effect")}})();pendingRequests.set(cacheKey,requestPromise);try{const result=await requestPromise;return result}finally{pendingRequests.delete(cacheKey)}}function getCache(){return cache}function clearPendingRequests(){pendingRequests.clear()}export{initializeClient,classifyImage,getCache,clearPendingRequests};