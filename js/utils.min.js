import{CONFIG}from"./config.min.js";class LimitedCache{constructor(maxSize=CONFIG.CACHE_MAX_SIZE){this.cache=new Map;this.maxSize=maxSize;this.accessOrder=new Set}set(key,value){if(this.cache.has(key)){this.accessOrder.delete(key)}else if(this.cache.size>=this.maxSize){const oldest=this.accessOrder.values().next().value;this.accessOrder.delete(oldest);this.cache.delete(oldest)}this.cache.set(key,value);this.accessOrder.add(key)}get(key){if(this.cache.has(key)){this.accessOrder.delete(key);this.accessOrder.add(key);return this.cache.get(key)}return undefined}has(key){return this.cache.has(key)}clear(){this.cache.clear();this.accessOrder.clear()}}const FileValidator={validateFiles(files){if(!files||files.length===0){throw new Error("No files selected.")}if(files.length>CONFIG.MAX_FILES){throw new Error(`Maximum ${CONFIG.MAX_FILES} files allowed at once.`)}for(const file of files){if(!CONFIG.ALLOWED_TYPES.includes(file.type)){throw new Error(`File type ${file.type} not allowed. Use: ${CONFIG.ALLOWED_TYPES.join(", ")}`)}if(file.size>CONFIG.MAX_FILE_SIZE){throw new Error(`File ${file.name} exceeds ${CONFIG.MAX_FILE_SIZE/1024/1024}MB limit.`)}}},sanitizeFileName(fileName){return fileName.replace(/[^a-zA-Z0-9.-]/g,"_").replace(/_{2,}/g,"_").substring(0,255)}};async function getFileHash(file){if(window.crypto&&window.crypto.subtle){const arrayBuffer=await file.arrayBuffer();const hashBuffer=await crypto.subtle.digest("SHA-256",arrayBuffer);const hashArray=Array.from(new Uint8Array(hashBuffer));return hashArray.map((b=>b.toString(16).padStart(2,"0"))).join("")}else{return`${file.name}-${file.size}`}}function compressImage(file){return new Promise((resolve=>{const reader=new FileReader;reader.onload=event=>{const img=new Image;img.src=event.target.result;img.onload=()=>{const canvas=document.createElement("canvas");const ctx=canvas.getContext("2d");let{width:width,height:height}=img;if(width>height){if(width>CONFIG.MAX_WIDTH){height*=CONFIG.MAX_WIDTH/width;width=CONFIG.MAX_WIDTH}}else{if(height>CONFIG.MAX_HEIGHT){width*=CONFIG.MAX_HEIGHT/height;height=CONFIG.MAX_HEIGHT}}canvas.width=width;canvas.height=height;ctx.drawImage(img,0,0,width,height);canvas.toBlob((blob=>resolve(new File([blob],file.name,{type:"image/jpeg"}))),"image/jpeg",CONFIG.JPEG_QUALITY)}};reader.readAsDataURL(file)}))}async function fetchUserIP(){try{const response=await fetch(CONFIG.IP_API_URL);const data=await response.json();return data.ip}catch(error){console.error("Failed to fetch IP address:",error);return"Unknown IP"}}class URLManager{constructor(){this.createdUrls=new Set}createObjectURL(blob){const url=URL.createObjectURL(blob);this.createdUrls.add(url);return url}cleanup(){this.createdUrls.forEach((url=>URL.revokeObjectURL(url)));this.createdUrls.clear()}}export{LimitedCache,FileValidator,getFileHash,compressImage,fetchUserIP,URLManager};