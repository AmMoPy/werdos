import{CONFIG}from"./config.min.js";class BaseDragHandler{constructor(containerId,options={}){this.container=document.getElementById(containerId);if(!this.container){console.error(`Container with id '${containerId}' not found`);return}this.options={dragMultiplier:options.dragMultiplier||CONFIG.SCROLL.DRAG_MULTIPLIER,throttleDelay:options.throttleDelay||CONFIG.SCROLL.THROTTLE_DELAY,...options};this.isDragging=false;this.startX=0;this.scrollLeft=0;this.rafId=null;this.throttleTimeouts=new Map;this.handleMouseDown=e=>{this.captureScrollPosition?.();this.startDrag(e.pageX);e.preventDefault()};this.handleMouseMove=e=>{if(!this.isDragging)return;e.preventDefault();this.rafThrottle((()=>this.handleDrag(e.pageX)))};this.handleMouseUp=()=>{this.endDrag()};this.handleTouchStart=e=>{if(e.touches.length!==1)return;this.captureScrollPosition?.();this.startDrag(e.touches[0].pageX)};this.handleTouchMove=e=>{if(!this.isDragging)return;this.rafThrottle((()=>this.handleDrag(e.touches[0].pageX)));e.preventDefault()};this.handleTouchEnd=()=>{this.endDrag()}}rafThrottle(func){if(this.rafId===null){this.rafId=requestAnimationFrame((()=>{func.call(this);this.rafId=null}))}}throttle(func,delay,key="default"){const existingTimeout=this.throttleTimeouts.get(key);if(existingTimeout){clearTimeout(existingTimeout)}const timeout=setTimeout((()=>{func.call(this);this.throttleTimeouts.delete(key)}),delay);this.throttleTimeouts.set(key,timeout)}cleanup(){if(this.rafId){cancelAnimationFrame(this.rafId);this.rafId=null}this.throttleTimeouts.forEach((timeout=>clearTimeout(timeout)));this.throttleTimeouts.clear()}setupBaseDragListeners(){this.container.addEventListener("mousedown",this.handleMouseDown);document.addEventListener("mousemove",this.handleMouseMove);document.addEventListener("mouseup",this.handleMouseUp);this.container.addEventListener("touchstart",this.handleTouchStart,{passive:true});this.container.addEventListener("touchmove",this.handleTouchMove,{passive:false});this.container.addEventListener("touchend",this.handleTouchEnd)}startDrag(pageX){this.isDragging=true;this.startX=pageX;this.container.style.cursor="grabbing"}endDrag(){this.isDragging=false;this.container.style.cursor="grab"}handleDrag(pageX){throw new Error("handleDrag must be implemented by subclass")}}class InfiniteScrollHandler extends BaseDragHandler{constructor(containerId,options={}){super(containerId,{speed:options.speed||CONFIG.SCROLL.INFINITE_SPEED,pauseOnHover:options.pauseOnHover!==false,...options});this.scrollPosition=0;this.singleSetWidth=0;this.init()}init(){this.setupBaseDragListeners();this.setupAnimation();this.setupHoverListeners();this.setupResizeListener()}setupHoverListeners(){if(this.options.pauseOnHover){this.container.addEventListener("mouseenter",(()=>this.pauseAnimation()));this.container.addEventListener("mouseleave",(()=>{if(!this.isDragging)this.resumeAnimation()}))}}setupResizeListener(){const handleResize=()=>{this.captureScrollPosition?.();this.setupAnimation();if(!this.isDragging){this.resumeAnimationFromPosition()}};window.addEventListener("resize",(()=>{this.throttle(handleResize,100,"resize")}))}setupAnimation(){this.container.style.transform="translateX(0)";const styleId="infinite-scroll-animation";let styleEl=document.getElementById(styleId);if(!styleEl){styleEl=document.createElement("style");styleEl.id=styleId;document.head.appendChild(styleEl)}this.singleSetWidth=this.container.scrollWidth/2;styleEl.textContent=`\n      @keyframes infiniteScroll {\n        0% { transform: translateX(0px); }\n        100% { transform: translateX(-${this.singleSetWidth}px); }\n      }\n    `;const duration=this.singleSetWidth/this.options.speed;this.container.style.animation=`infiniteScroll ${duration}s linear infinite`}captureScrollPosition(){const computedStyle=window.getComputedStyle(this.container);const matrix=new DOMMatrix(computedStyle.transform);this.scrollPosition=Math.abs(matrix.m41);this.scrollPercent=this.scrollPosition/this.singleSetWidth*100}startDrag(pageX){this.isDragging=true;this.captureScrollPosition();this.container.style.animation="none";this.container.style.transform=`translateX(-${this.scrollPosition}px)`;this.startX=pageX;this.scrollLeft=this.scrollPosition;this.container.style.cursor="grabbing"}handleDrag(pageX){const walkPixels=(pageX-this.startX)*(this.options.dragMultiplier*.5);let newScrollPosition=this.scrollLeft-walkPixels;while(newScrollPosition<0)newScrollPosition+=this.singleSetWidth;while(newScrollPosition>=this.singleSetWidth)newScrollPosition-=this.singleSetWidth;this.scrollPosition=newScrollPosition;this.container.style.transform=`translateX(-${this.scrollPosition}px)`}endDrag(){if(!this.isDragging)return;this.isDragging=false;this.container.style.cursor="grab";this.resumeAnimationFromPosition()}resumeAnimationFromPosition(){this.container.style.animation="none";this.container.offsetHeight;const currentPercent=this.scrollPosition/this.singleSetWidth*100;const fullDuration=this.singleSetWidth/this.options.speed;this.container.style.transform=`translateX(-${this.scrollPosition}px)`;requestAnimationFrame((()=>{this.container.style.animation=`infiniteScroll ${fullDuration}s linear infinite`;this.container.style.animationDelay=`-${currentPercent/100*fullDuration}s`}))}pauseAnimation(){this.container.style.animationPlayState="paused"}resumeAnimation(){this.container.style.animationPlayState="running"}}class BasicDragScroll extends BaseDragHandler{constructor(containerId,options={}){super(containerId,{dragMultiplier:options.dragMultiplier||CONFIG.SCROLL.RESULTS_DRAG_MULTIPLIER,...options});this.init()}init(){this.container.style.cursor="grab";this.setupBaseDragListeners();this.container.addEventListener("mouseleave",this.handleMouseUp)}handleDrag(pageX){const x=pageX-this.container.offsetLeft;const walk=(x-this.startX)*this.options.dragMultiplier;this.container.scrollLeft=this.scrollLeft-walk;this.clampScroll()}startDrag(pageX){super.startDrag(pageX);this.startX=pageX-this.container.offsetLeft;this.scrollLeft=this.container.scrollLeft}clampScroll(){const maxScroll=this.container.scrollWidth-this.container.clientWidth;this.container.scrollLeft=Math.max(0,Math.min(this.container.scrollLeft,maxScroll))}}export{InfiniteScrollHandler,BasicDragScroll};